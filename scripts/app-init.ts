#!/usr/bin/env node

/**
 * Script de inicializa√ß√£o global do AutoBet App
 * 
 * Este script √© executado antes do Next.js iniciar e:
 * 1. Carrega as vari√°veis de ambiente
 * 2. Inicializa a conex√£o com o banco de dados
 * 3. Executa migrations se necess√°rio
 * 4. Cria dados de teste se n√£o existirem
 */

import 'dotenv/config';
import 'reflect-metadata';
import { AppDataSource } from '../src/database/data-source';
import { Account } from '../src/database/entities/Account';
import bcrypt from 'bcryptjs';

// Configura√ß√µes
const SKIP_DB_INIT = process.env.SKIP_DB_INIT === 'true';

/**
 * Inicializa a conex√£o com o banco de dados
 */
async function initializeDatabase(): Promise<void> {
  try {
    console.log('üîÑ Inicializando conex√£o com o banco de dados...');
    
    if (!AppDataSource.isInitialized) {
      await AppDataSource.initialize();
      console.log('‚úÖ Banco de dados conectado com sucesso');
    }
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco de dados:', error);
    console.log('‚ÑπÔ∏è A aplica√ß√£o continuar√° funcionando com dados mock');
    throw error;
  }
}

/**
 * Executa migrations se necess√°rio
 */
async function runMigrations(): Promise<void> {
  try {
    console.log('üîÑ Verificando migrations...');
    await AppDataSource.runMigrations();
    console.log('‚úÖ Migrations executadas com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao executar migrations:', error);
    throw error;
  }
}

/**
 * Cria dados de teste se n√£o existirem
 */
async function createTestData(): Promise<void> {
  try {
    const accountRepository = AppDataSource.getRepository(Account);
    const existingUser = await accountRepository.findOne({ 
      where: { email: 'teste@teste.com' } 
    });

    if (!existingUser) {
      console.log('üîÑ Criando usu√°rio de teste...');
      
      const hashedPassword = await bcrypt.hash('123456', 12);
      
      const testAccount = accountRepository.create({
        email: 'teste@teste.com',
        password: hashedPassword,
        name: 'Usu√°rio Teste',
        isActive: true,
      });

      await accountRepository.save(testAccount);
      console.log('‚úÖ Usu√°rio de teste criado com sucesso');
      console.log('üìß Email: teste@teste.com');
      console.log('üîë Senha: 123456');
    } else {
      console.log('‚ÑπÔ∏è Usu√°rio de teste j√° existe');
    }
  } catch (error) {
    console.error('‚ùå Erro ao criar dados de teste:', error);
    throw error;
  }
}

/**
 * Fun√ß√£o principal de inicializa√ß√£o
 */
async function initializeApp(): Promise<void> {
  console.log('üöÄ Iniciando AutoBet App...');
  console.log(`üìä Ambiente: ${process.env.NODE_ENV || 'development'}`);
  
  // Verificar se deve pular a inicializa√ß√£o do banco
  if (SKIP_DB_INIT) {
    console.log('‚è≠Ô∏è Pulando inicializa√ß√£o do banco de dados (SKIP_DB_INIT=true)');
    return;
  }

  try {
    // Inicializar banco de dados
    await initializeDatabase();
    
    // Executar migrations
    await runMigrations();
    
    // Criar dados de teste
    await createTestData();
    
    console.log('üéâ Inicializa√ß√£o conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a inicializa√ß√£o:', error);
    console.log('\nüí° Dicas para resolver:');
    console.log('1. Verifique se o MySQL est√° rodando');
    console.log('2. Confirme as credenciais no arquivo .env');
    console.log('3. Crie o banco de dados "autobet" no MySQL');
    console.log('4. Para pular a inicializa√ß√£o do banco, use: SKIP_DB_INIT=true');
    console.log('\nüîß A aplica√ß√£o continuar√° funcionando com dados mock!');
  }
}

/**
 * Fun√ß√£o para limpar recursos
 */
async function cleanup(): Promise<void> {
  if (AppDataSource.isInitialized) {
    await AppDataSource.destroy();
    console.log('üîå Conex√£o com banco de dados encerrada');
  }
}

// Executar inicializa√ß√£o se chamado diretamente
if (require.main === module) {
  initializeApp()
    .then(() => {
      console.log('‚úÖ Script de inicializa√ß√£o conclu√≠do');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no script de inicializa√ß√£o:', error);
      process.exit(1);
    });
}

// Exportar fun√ß√µes para uso em outros m√≥dulos
export { 
  initializeApp, 
  initializeDatabase, 
  runMigrations, 
  createTestData, 
  cleanup 
};
